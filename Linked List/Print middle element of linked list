class linked:
    def __init__(self, data = None):
        self.data = data
        self.next = None
class headvalue:
    def __init__(self):
        self.val = None

    def print_middle_element(self):
        cur = self.val
        i = 1
        pos = 0
        while cur is not None:
            pos += 1
            cur = curt.next
        if cur is None:
                return self.val
        cur = self.val
        while (cur is not None) and (i <= pos//2):
            i += 1
            cur = cur.next
        return cur.data

    def traverse(self):
        i = self.val
        while i is not None:
            print(i.data)
            i=i.next

list1 = headvalue()
list1.val = linked("Mon")
e2 = linked("Tue")
e3 = linked("Wed")
e4 = linked("Thu")
e5 = linked("Fri")
list1.val.next = e2
e2.next = e3
e3.next = e4
e4.next = e5
print(list1.print_middle_element())


                                                                                 OR

class linked:
    def __init__(self, data = None):
        self.data = data
        self.next = None
class headvalue:
    def __init__(self):
        self.val = None

    def print_middle_element(self):
        start = self.val
        end = self.val
        if start is None:
                return self.val
        while (end is not None) and (end.next is not None):
            start = start.next
            end = end.next.next
        return start.data

    def traverse(self):
        i = self.val
        while i is not None:
            print(i.data)
            i=i.next

list1 = headvalue()
list1.val = linked("Mon")
e2 = linked("Tue")
e3 = linked("Wed")
e4 = linked("Thu")
e5 = linked("Fri")
list1.val.next = e2
e2.next = e3
e3.next = e4
e4.next = e5
print(list1.print_middle_element())
